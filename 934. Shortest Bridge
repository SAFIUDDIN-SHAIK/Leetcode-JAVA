class Solution {
  public int shortestBridge(int[][] g) {
    markGridTwo(g);

    for (int col = 2;; ++col)

      for (int i = 0; i < g.length; ++i)

        for (int j = 0; j < g[0].length; ++j)

          if (g[i][j] == col)

            if (func(g, i + 1, j, col) || func(g, i - 1, j, col) || func(g, i, j + 1, col) || func(g, i, j - 1, col))

              return col - 2;

  }

  private void markGridTwo(int[][] g) {

    for (int i = 0; i < g.length; ++i)

      for (int j = 0; j < g[0].length; ++j)

        if (g[i][j] == 1) {

          markGridTwo(g, i, j);

          return;

        }

  }

  private void markGridTwo(int[][] g, int i, int j) {

    if (i < 0 || i == g.length || j < 0 || j == g[0].length)

      return;

    if (g[i][j] != 1)

      return;

    g[i][j] = 2;
    markGridTwo(g, i + 1, j);
    markGridTwo(g, i - 1, j);
    markGridTwo(g, i, j + 1);
    markGridTwo(g, i, j - 1);

  }

  private boolean func(int[][] g, int i, int j, int col) {

    if (i < 0 || i == g.length || j < 0 || j == g[0].length)

      return false;

    if (g[i][j] == 0)

      g[i][j] = col + 1;

    return g[i][j] == 1;

  }
  
}
